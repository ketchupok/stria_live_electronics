str(stria_score)
stria_score$Start[0]+stria_score$Dur[0]
stria_score$Freq[0]
stria_score$Freq[[0]]
stria_score <- read.csv("/Volumes/fs_personal/PERSONAL/hofmann-alex/DokumenteOnFsPersonal/Books/computerMusic/stria/Stria_score_asNumbers_st_dur_freq.csv", sep = ";", dec = ",")
str(stria_score)
stria_score$Start[0]+stria_score$Dur[0]
stria_score$End = stria_score$Start+stria_score$Dur
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(0, 950), #
     ylim = c(-3000, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
#
points(stria_score$Start, stria_score$Freq)#
points(stria_score$Start, stria_score$Freq)#
#
#abline(h=1000, col = 2)#
segments(stria_score$Start[0], stria_score$Freq[0], stria_score$End, stria_score$Freq[0])
segments(stria_score$Start[0], stria_score$Freq[0], stria_score$End[0], stria_score$Freq[0])
(
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(0, 950), #
     ylim = c(-3000, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
#
points(stria_score$Start, stria_score$Freq)#
points(stria_score$Start, stria_score$Freq)#
#
#abline(h=1000, col = 2)#
segments(stria_score$Start[0], stria_score$Freq[0], stria_score$End[0], stria_score$Freq[0])
segments(0, 200, 1000, 200 )
str(stria_score)
stria_score$Start[[0]]
stria_score$Start[][0]
stria_score$Start[0][0]
mean(stria_score$Start[0])
str(stria_score)
mean(stria_score$Freq)
mean(stria_score$Start)
stria_score[0]
stria_score[0][0]
stria_score[[0]][0]
stria_score[0,0]
stria_score[0,1]
c(stria_score[0,1])
c(stria_score.values[0,1])
stria_score.values[0,1]
stria_score[0,1]
stria_score$Start
stria_score$Start[1]
stria_score$Start[2]
stria_score$Start[1]
k = 1
segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])
for (k in 1:length(stria_score$Start)#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
)
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
}
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(0, 950), #
     ylim = c(0, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
#
points(stria_score$Start, stria_score$Freq)#
)#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
}
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
text(stria_score$Start[k],#
     stria_score$Freq[k],#
     labels = k)#
#
}
(#
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(0, 950), #
     ylim = c(0, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
#
#points(stria_score$Start, stria_score$Freq)#
)#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
text(stria_score$Start[k],#
     stria_score$Freq[k]+100,#
     labels = k)#
#
}#
#
)
(#
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(0, 950), #
     ylim = c(0, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
#
#points(stria_score$Start, stria_score$Freq)#
)#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
text(stria_score$Start[k],#
     stria_score$Freq[k]+50,#
     labels = k)#
#
}#
#
)
(#
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(0, 950), #
     ylim = c(0, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
#
#points(stria_score$Start, stria_score$Freq)#
)#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
text(stria_score$Start[k],#
     stria_score$Freq[k]+50,#
     labels = k, cex = 0.2)#
#
}#
#
)
(#
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(0, 950), #
     ylim = c(0, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
#
#points(stria_score$Start, stria_score$Freq)#
)#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
text(stria_score$Start[k],#
     stria_score$Freq[k],#
     labels = k, cex = 0.5, offset=0.5)#
#
}#
#
)
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
text(stria_score$Start[k],#
     stria_score$Freq[k],#
     labels = k, cex = 0.5, offset=0.9)#
#
}
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
text(stria_score$Start[k],#
     stria_score$Freq[k],#
     labels = k, cex = 0.5, pos = 3)#
#
}
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(0, 950), #
     ylim = c(0, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
#
#points(stria_score$Start, stria_score$Freq)#
)#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
text(stria_score$Start[k],#
     stria_score$Freq[k],#
     labels = k, cex = 0.5, pos = 3)#
#
}
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
text(stria_score$Start[k],#
     stria_score$Freq[k],#
     labels = k, cex = 0.5, pos = 1)#
#
}
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
text(stria_score$Start[k],#
     stria_score$Freq[k],#
     labels = k, cex = 0.5, pos = 2)#
#
}
(#
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(0, 950), #
     ylim = c(0, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
#
#points(stria_score$Start, stria_score$Freq)#
)#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
text(stria_score$Start[k],#
     stria_score$Freq[k],#
     labels = k, cex = 0.5, pos = 2)#
#
}#
#
)
(#
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(0, 950), #
     ylim = c(0, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
#
#points(stria_score$Start, stria_score$Freq)#
)#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
text(stria_score$Start[k]-10,#
     stria_score$Freq[k],#
     labels = k, cex = 0.3, pos = 2)#
#
}#
#
)
stria_score <- read.csv("/Volumes/fs_personal/PERSONAL/hofmann-alex/DokumenteOnFsPersonal/Books/computerMusic/stria/Stria_score_asNumbers_st_dur_freq.csv", sep = ";", dec = ",")
str(stria_score)
stria_score$End = stria_score$Start+stria_score$Dur
(#
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(0, 950), #
     ylim = c(0, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
#
#points(stria_score$Start, stria_score$Freq)#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
}#
#
)
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(0, 950), #
     ylim = c(0, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(0, 950), #
     ylim = c(0, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(500, 650), #
     ylim = c(0, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }
stria_score <- read.csv("/Volumes/fs_personal/PERSONAL/hofmann-alex/DokumenteOnFsPersonal/Books/computerMusic/stria/Stria_score_asNumbers_st_dur_freq.csv", sep = ";", dec = ",")
str(stria_score)
stria_score$End = stria_score$Start+stria_score$Dur
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(0, 950), #
     ylim = c(0, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(0, 180), #
     ylim = c(0, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(500, 650), #
     ylim = c(0, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }
stria_score <- read.csv("/Volumes/fs_personal/PERSONAL/hofmann-alex/DokumenteOnFsPersonal/Books/computerMusic/stria/Stria_score_asNumbers_st_dur_freq.csv", sep = ";", dec = ",")
stria_score$End = stria_score$Start+stria_score$Dur
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(0, 180), #
     ylim = c(0, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }
pdf("~/Desktop/Stria_Pt1.pdf", width = 10.0, height = 7,#
          onefile = FALSE, encoding = "TeXtext.enc")#
par(mfcol=c(3,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
plot(x = 1,                 #
     xlab = "X Label", #
     ylab = "Y Label",#
     xlim = c(0, 160), #
     ylim = c(0, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
dev.off()
pdf("~/Desktop/Stria_Pt1.pdf", width = 10.0, height = 7,#
          onefile = FALSE, encoding = "TeXtext.enc")#
par(mfcol=c(2,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(0, 160), #
     ylim = c(0, 3000),#
     main = "Blank Plotting Canvas",#
     type = "n")#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
dev.off()
pdf("~/Desktop/Stria_Pt1.pdf", width = 10.0, height = 7,#
          onefile = FALSE, encoding = "TeXtext.enc")#
par(mfcol=c(2,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(0, 160), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
dev.off()
pdf("~/Desktop/Stria_Pt1.pdf", width = 10.0, height = 7,#
          onefile = FALSE, encoding = "TeXtext.enc")#
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(0, 160), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
dev.off()
pdf("~/Desktop/Stria_Pt1.pdf", width = 10.0, height = 7,#
          onefile = FALSE, encoding = "TeXtext.enc")#
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(0, 160), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
abline(v = 10)#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
dev.off()
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(0, 160), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
abline(v = 10, col = "grey", lty = "dashed")#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }
c(1:10)
c(1:20)
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}
steps = c(1:20)*10
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}
pdf("~/Desktop/Stria_Pt1.pdf", width = 10.0, height = 7,#
          onefile = FALSE, encoding = "TeXtext.enc")#
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 0#
end = 160#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
steps = c(1:20)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
dev.off()
pdf("~/Desktop/Stria_Pt1.pdf", width = 10.0, height = 7,#
          onefile = FALSE, encoding = "TeXtext.enc")#
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 0#
end = 160#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
steps = c(0:20)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
dev.off()
pdf("~/Desktop/Stria_Pt2.pdf", width = 10.0, height = 7,#
          onefile = FALSE, encoding = "TeXtext.enc")#
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 0#
end = 160#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
steps = c(0:20)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 150#
end = 310#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
steps = c(0:20)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
dev.off()
pdf("~/Desktop/Stria_Pt2.pdf", width = 10.0, height = 7,#
          onefile = FALSE, encoding = "TeXtext.enc")#
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 0#
end = 160#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
steps = c(0:200)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 150#
end = 310#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
steps = c(0:20)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
dev.off()
pdf("~/Desktop/Stria_Pt2.pdf", width = 10.0, height = 7,#
          onefile = TRUE, encoding = "TeXtext.enc")#
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 0#
end = 160#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
steps = c(0:200)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 150#
end = 310#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
steps = c(0:20)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
dev.off()
pdf("~/Desktop/Stria_Pt2.pdf", width = 10.0, height = 7,#
          onefile = TRUE, encoding = "TeXtext.enc")#
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 0#
end = 160#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
steps = c(0:200)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 150#
end = 310#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
dev.off()
pdf("~/Desktop/Stria_Pt2.pdf", width = 10.0, height = 7,#
          onefile = TRUE, encoding = "TeXtext.enc")#
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 0#
end = 160#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
steps = c(0:200)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 150#
end = 310#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 300#
end = 450#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 400#
end = 550#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
dev.off()
pdf("~/Desktop/Stria_Pt2.pdf", width = 10.0, height = 7,#
          onefile = TRUE, encoding = "TeXtext.enc")#
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 0#
end = 160#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
steps = c(0:200)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 150#
end = 310#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 300#
end = 450#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 400#
end = 550#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 550#
end = 700#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 700#
end = 850#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 800#
end = 900#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-5,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
dev.off()
pdf("~/Desktop/Stria_Pt2.pdf", width = 10.0, height = 7,#
          onefile = TRUE, encoding = "TeXtext.enc")#
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 0#
end = 160#
number_distance = 3#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
steps = c(0:200)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 150#
end = 310#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 300#
end = 450#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 400#
end = 550#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 550#
end = 700#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 700#
end = 850#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 800#
end = 950#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
dev.off()
pdf("~/Desktop/Stria_Pt2.pdf", width = 10.0, height = 7,#
          onefile = TRUE, encoding = "TeXtext.enc")#
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 0#
end = 160#
number_distance = 0#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
steps = c(0:200)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 150#
end = 310#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 300#
end = 450#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 400#
end = 550#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 550#
end = 700#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 700#
end = 850#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 800#
end = 950#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
dev.off()
pdf("~/Desktop/Stria_Pt2.pdf", width = 10.0, height = 7,#
          onefile = TRUE, encoding = "TeXtext.enc")#
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 0#
end = 160#
number_distance = 1#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
steps = c(0:200)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 150#
end = 310#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 300#
end = 450#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 400#
end = 550#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 550#
end = 700#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 700#
end = 850#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 800#
end = 950#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
dev.off()
start = 400#
end = 550#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n",#
     log='y')#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 0#
end = 160#
number_distance = 1#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
steps = c(0:200)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 0#
end = 160#
number_distance = 1#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n")#
#
steps = c(0:20)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 0#
end = 160#
number_distance = 1#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(0, 3000),#
     main = "",#
     type = "n", log = 'y')#
#
steps = c(0:20)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 0#
end = 160#
number_distance = 1#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(50, 3000),#
     main = "",#
     type = "n", log = 'y')#
#
steps = c(0:20)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }
min(stria_score$Freq)
max(stria_score$Freq)
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 0#
end = 160#
number_distance = 1#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(90, 2700),#
     main = "",#
     type = "n", log = 'y')#
#
steps = c(0:20)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }
pdf("~/Desktop/Stria_Pt3.pdf", width = 10.0, height = 7,#
          onefile = TRUE, encoding = "TeXtext.enc")#
#
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 0#
end = 160#
number_distance = 1#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(90, 2700),#
     main = "",#
     type = "n", log = 'y')#
#
steps = c(0:20)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 150#
end = 310#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(90, 2700),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 300#
end = 450#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(90, 2700),#
     main = "",#
     type = "n", log = 'y')#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 400#
end = 550#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(90, 2700),#
     main = "",#
     type = "n", log = 'y')#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 550#
end = 700#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(90, 2700),#
     main = "",#
     type = "n", log = 'y')#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 700#
end = 850#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(90, 2700),#
     main = "",#
     type = "n", log = 'y')#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 800#
end = 950#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(90, 2700),#
     main = "",#
     type = "n", log = 'y')#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
dev.off()
pdf("~/Desktop/Stria_Pt3.pdf", width = 10.0, height = 7,#
          onefile = TRUE, encoding = "TeXtext.enc")#
#
par(mfcol=c(1,1), mai = c(0.4, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9)#
start = 0#
end = 160#
number_distance = 1#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(90, 2700),#
     main = "",#
     type = "n", log = 'y')#
#
steps = c(0:95)*10#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 150#
end = 310#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(90, 2700),#
     main = "",#
     type = "n")#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 300#
end = 450#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(90, 2700),#
     main = "",#
     type = "n", log = 'y')#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 400#
end = 550#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(90, 2700),#
     main = "",#
     type = "n", log = 'y')#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
start = 550#
end = 700#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(90, 2700),#
     main = "",#
     type = "n", log = 'y')#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 700#
end = 850#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(90, 2700),#
     main = "",#
     type = "n", log = 'y')#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
#
start = 800#
end = 950#
# Fmod als schatten#
plot(x = 1,                 #
     xlab = "Time (s)", #
     ylab = "Pitch (Hz)",#
     xlim = c(start, end), #
     ylim = c(90, 2700),#
     main = "",#
     type = "n", log = 'y')#
#
for (l in steps){#
	abline(v = steps, col = "grey", lty = "dashed")#
}#
#
for (k in 1:length(stria_score$Start)){#
	print(k)#
	segments(stria_score$Start[k], stria_score$Freq[k], stria_score$End[k], stria_score$Freq[k])#
	text(stria_score$Start[k]-number_distance,#
     stria_score$Freq[k],#
     labels = k, cex = 0.4)#
#
    }#
dev.off()
# TODO:#
  - exportiere neues csv mit Amp und Buffer info#
  - importiere alle buffer formen zu R#
  stria_score <- read.csv("Stria_score_asNumbers_st_dur_freq.csv", sep = ";", dec = ",") #load file#
  stria_score$End = stria_score$Start+stria_score$Dur # calc Ends#
  fader1 <- read.csv2("fader1_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader1 <- fader1[,2:40]#
  fader2 <- read.csv2("fader2_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader2 <- fader2[,2:40]#
  fader3 <- read.csv2("fader3_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader3 <- fader3[,2:40]#
  fader4 <- read.csv2("fader4_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader4 <- fader4[,2:40]#
  fader9 <- read.csv2("fader1_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader9 <- fader9[,2:40]#
  fader10 <- read.csv2("fader2_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader10 <- fader10[,2:40]#
  fader11 <- read.csv2("fader3_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader11 <- fader11[,2:40]#
  fader12 <- read.csv2("fader4_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader12 <- fader12[,2:40] #
col_scale_fact = 220/max(stria_score$Freq)#
spalten <- c(1:39)#
number_distance = 1#
start = 0#
end = 150#
#
setup <- function(x, y){#
  par(mfcol=c(1,1), mai = c(0.7, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.9) # papiergröße#
start = x#
end = y#
number_distance = 1#
}#
#
#x="Fader Pl 1"#
plotter <- function(x, start, end){#
plot(x = 1, #
     xlab = "Time (s)", # axis lable #
     ylab = "Fader",#
     xlim = c(start, end), #
     ylim = c(0, 10), # axis size#
     main = "",#
     type = "n",#
     yaxt = "n")#
#
axis(2, at = c(0:9), labels = c("", "1", "2", "3", "4", " ", "1", "2", "3", "4"))#
#
fader_lines <- c(1, 2, 3, 4, 6, 7, 8, 9)#
abline(h = fader_lines, col = "grey", lty = "dashed")#
#
#steps = c(0:95)*10#
#for (l in steps){#
#  abline(v = steps, col = "grey", lty = "dashed")#
#	}#
}#
amanfang <- function(x){#
  anfang <- c()  #
  for (y in x) {#
    if (!is.na(y)){ #
      anfang <- append(anfang, stria_score$Start[y])}#
  }#
  min(anfang)#
}#
zuende <- function(x) {#
  ende <- c()  #
  for (y in x) {#
    if (!is.na(y)){ #
      ende <- append(ende, stria_score$End[y])}#
  }#
  max(ende)#
}#
f1R <- function (x, y, a, o, c) #start, end, amplitude, offset=freq, c=color#
{#
  xx <- c(0, 4096, 8192, 12288, 16384, 0)#
  yy <- c(0, 0.33,  1,  0.33, 0, 0)#
polygon((x+xx*(y-x)/16384),(-yy*a+o), col = c))#
}#
f1L <- function (x, y, a, o, c)#
{#
  xx <- c(0, 4096, 8192, 12288, 16384, 0)#
  yy <- c(0, 0.33,  1,  0.33, 0, 0)#
  polygon((x+xx*(y-x)/16384),(yy*a+o), col = c)#
}#
#x=fader1 y=1#
drawfader <- function (x, y){#
for (s in spalten) {#
  for (k in x[s, ]) {#
    if (!is.na(k)){#
      #print(k)#
      #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
      col_r <- col_scale_fact*stria_score$Freq[k]#
      f1L(stria_score$Start[k], stria_score$End[k], 0.3, y+stria_score$Freq[k]*0.0001, "green")	#
      f1R(stria_score$Start[k], stria_score$End[k], 0.3, y+stria_score$Freq[k]*0.0001, "green")	#
      text(stria_score$Start[k]-number_distance,#
           y+stria_score$Freq[k]*0.0001+0.03,#
           labels = k, cex = 0.4)#
      text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
           y+stria_score$Freq[k]*0.0001+0.03,#
           labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 0.4, col = "white")          #
      }#
    }#
  }#
}  #
#
drawfaderB <- function (x, y){#
for (s in spalten) {#
  for (k in x[s, ]) {#
    if (!is.na(k)){#
      #print(k)#
      #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001, col = "red") # event lines	#
      f1L(stria_score$Start[k], stria_score$End[k], 0.3, y+stria_score$Freq[k]*0.0001, "green")	#
      f1R(stria_score$Start[k], stria_score$End[k], 0.3, y+stria_score$Freq[k]*0.0001, "green")	#
      text(stria_score$Start[k]-number_distance,#
           y+stria_score$Freq[k]*0.0001+0.03,#
           labels = k, cex = 0.4)#
       text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
           y+stria_score$Freq[k]*0.0001+0.03,#
           labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 0.4, col = "white")#
      }#
    }#
  }#
} #
setup (0, 60)#
plotter("fader pl 1", 0, 60)#
drawfader(fader1, 1)#
drawfader(fader2, 2)#
drawfader(fader3, 3)#
drawfader(fader4, 4)#
#
drawfaderB(fader9,  6)#
drawfaderB(fader10, 7)#
drawfaderB(fader11, 8)#
drawfaderB(fader12, 9)
stria_score <- read.csv("Stria_score_asNumbers_st_dur_freq.csv", sep = ";", dec = ",") #load file#
  stria_score$End = stria_score$Start+stria_score$Dur # calc Ends#
  fader1 <- read.csv2("fader1_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader1 <- fader1[,2:40]#
  fader2 <- read.csv2("fader2_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader2 <- fader2[,2:40]#
  fader3 <- read.csv2("fader3_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader3 <- fader3[,2:40]#
  fader4 <- read.csv2("fader4_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader4 <- fader4[,2:40]#
  fader9 <- read.csv2("fader1_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader9 <- fader9[,2:40]#
  fader10 <- read.csv2("fader2_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader10 <- fader10[,2:40]#
  fader11 <- read.csv2("fader3_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader11 <- fader11[,2:40]#
  fader12 <- read.csv2("fader4_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader12 <- fader12[,2:40]
ls
source("/Users/hofmann-alex/Documents/2023/Dustin/SCORE/score_stria_06.R")
stria_score <- read.csv("Stria_score_asNumbers_st_dur_freq.csv", sep = ";", dec = ",") #load file#
  stria_score$End = stria_score$Start+stria_score$Dur # calc Ends#
  fader1 <- read.csv2("fader1_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader1 <- fader1[,2:40]#
  fader2 <- read.csv2("fader2_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader2 <- fader2[,2:40]#
  fader3 <- read.csv2("fader3_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader3 <- fader3[,2:40]#
  fader4 <- read.csv2("fader4_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader4 <- fader4[,2:40]#
  fader9 <- read.csv2("fader1_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader9 <- fader9[,2:40]#
  fader10 <- read.csv2("fader2_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader10 <- fader10[,2:40]#
  fader11 <- read.csv2("fader3_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader11 <- fader11[,2:40]#
  fader12 <- read.csv2("fader4_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
  fader12 <- fader12[,2:40]
stria_score <- read.csv("Stria_score_asNumbers_voiceupdate_fullsheet.csv", sep = ";", dec = ",") #load file#
stria_score$End = stria_score$Start+stria_score$Dur # calc Ends#
#
fader1 <- read.csv2("fader1_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader1 <- fader1[,2:40]#
#
fader2 <- read.csv2("fader2_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader2 <- fader2[,2:40]#
#
fader3 <- read.csv2("fader3_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader3 <- fader3[,2:40]#
#
fader4 <- read.csv2("fader4_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader4 <- fader4[,2:40]#
#
fader9 <- read.csv2("fader1_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader9 <- fader9[,2:40]#
#
fader10 <- read.csv2("fader2_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader10 <- fader10[,2:40]#
#
fader11 <- read.csv2("fader3_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader11 <- fader11[,2:40]#
#
fader12 <- read.csv2("fader4_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader12 <- fader12[,2:40] #
col_scale_fact = 1.0/max(stria_score$Freq[1:383])#
Amp_scale_fact = 0.5/max(stria_score$Amp[1:383])#
print(stria_score$Freq[1:383])#
rows_in_fader_assignment <- c(1:39)#
number_distance = 1#
start = 0#
end = 150#
#
setup <- function(x, y){#
  par(mfcol=c(1,1), mai = c(0.7, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.5) # papiergröße#
  start = x#
  end = y#
  number_distance = 1#
}#
quartzFonts(avenir = c("Avenir Book", "Avenir Black", "Avenir Book Oblique", #
                       "Avenir Black Oblique"))#
#
par(family = 'avenir')#
#
#x="Fader Pl 1"#
plotter <- function(start, end){#
  plot(x = 1,  #
       xlab = "", # axis lable #
       ylab = "",#
       xlim = c(start, end), #
       ylim = c(0, 10), # axis size#
       xaxs = "i",#
       yaxs = "i",#
       main = "",#
       type = "n",#
       yaxt = "n",#
       xaxt = "n")#
  axis(2, at = c( 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5), las = 2, labels = c("", "1", "", "2", "", "3", "", "4", "", "", "1", "", "2", "", "3", "", "4"), tick = FALSE)#
  fader_lines <- c(1, 2, 3, 4, 6, 7, 8, 9)#
  abline(h = fader_lines, col = "grey", lty = "dashed")#
  abline(h = 5, col = "black")#
  mtext("Fbank1",                     # Add title manually#
        side = 2,#
        line = 2,#
        las = 2,#
        at = 3,#
        cex = 0.8,#
        font = 3)#
  mtext("Fbank2",                     # Add title manually#
        side = 2,#
        line = 2,#
        las = 2,#
        at = 8,#
        cex = 0.8,#
        font = 3)#
  #steps = c(0:95)*10#
  #for (l in steps){#
  #  abline(v = steps, col = "grey", lty = "dashed")#
  #	}#
}#
#
#drawform <- function (x){#
#abline(v = stria_score$Start[32], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[46], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[144], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[235], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[311], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[358], col = "red", lty = "dashed")#
#}#
#
getx <- function (x)#
{#
  switch(x, #
         {},#
         {xx <- c(0, 4096, 8192, 12288, 16384, 0)}, #
         {xx <- c(0, 2094, 5246, 12620, 13913, 16384, 0)},#
         {xx <- c(0, 1500, 2500, 3220, 4220, 5464, 16384, 0)},#
         {xx <- c(0, 2525, 5990, 9994, 11345, 16384, 0)},#
         {xx <- c(0, 3276, 6552, 9828, 16384, 0)},#
         {xx <- c(0, 3000, 3010, 3100, 6034, 7415, 8967, 11296, 16384, 0)},#
         {xx <- c(0, 2071, 3279, 3712, 3889, 4580, 5270, 6478, 7253, 8113, 10093, 11557, 16384, 0)}#
  )#
}#
#
gety <- function (y)#
{#
  switch(y, #
         {},#
         {yy <- c(0, 0.33,  1,  0.33, 0, 0)},#
         {yy <- c(1, 0.543, 0.367, 0.2037, 0.0845, 0, 0)},#
         {yy <- c(1, 0.4, 0.2, 0.15, 0.08, 0, 0, 0)},#
         {yy <- c(0.6904, 1, 0.71, 0.255, 0.15, 0, 0)},#
         {yy <- c(-0.5, 0.04, 0.08, 0.01, 0.03, 0)},#
         {yy <- c(0, 0.35, 0.85, 1, 0.857, 0.44, 0.214, 0.107, 0, 0)},#
         {yy <- c(0, 0.135, 0.27, 0.416, 0.827, 0.949, 0.998, 1, 0.916, 0.7, 0.365, 0.234, 0, 0)}#
  )#
}#
#
f <- function (l, r , x, y, a, o, c)# left right start, end, amplitude, offset=freq, c=color#
{#
  polygon((x+getx(l)*(y-x)/16384),(gety(l)*a+o), col = grey(c))#
  polygon((x+getx(r)*(y-x)/16384),(gety(r)*-1*a+o), col = grey(c))#
}#
print(stria_score$ampF[1:383])#
print(stria_score$IAF[1:383])#
print(stria_score$Amp[1:383])#
#x=fader1 y=1#
drawfader <- function (x, y){#
  for (s in rows_in_fader_assignment) { # go through rows fader sheet, 39 is max number of events per fader#
  	print(length(x[s, ])#
    for (k in x[s, ]) { # k event number, that refers to the line in full sheet#
      if (!is.na(k)){#
        #print(x[s,])#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
        if(s==1) {#
        text(stria_score$Start[k]-number_distance,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = k, cex = 1.5)#
        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
           }#
      }#
    }#
  }#
}#
drawfaderB <- function (x, y){#
  for (s in rows_in_fader_assignment) {#
    for (k in x[s, ]) {#
      if (!is.na(k)){#
        #print(k)#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001, col = "red") # event lines#
        col_r <- col_scale_fact*stria_score$Freq[k]	#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
        text(stria_score$Start[k]-number_distance,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = k, cex = 1.5)#
        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
      }#
    }#
  }#
} #
#
drawpage <- function (nr,beg, end)#
{#
  setup (beg, end)#
  plotter(beg, end)#
  mtext("Stria by John Chowning Performancescore",                     # Add Titel manually#
        side = 3,#
        line = 2,#
        cex = 0.5#
        )#
  mtext(nr,                     # Add Pagenumber manually#
        side = 3,#
        line = 2,#
        cex = 0.5,#
        adj=1#
        )#
  drawfader(fader1, 1)#
  drawfader(fader2, 2)#
  drawfader(fader3, 3)#
  drawfader(fader4, 4)#
  drawfaderB(fader9,  6)#
  drawfaderB(fader10, 7)#
  drawfaderB(fader11, 8)#
  drawfaderB(fader12, 9)#
}#
# generate score#
#
 if plot to pdf#
pdf("~/Desktop/Stria_Pt12.pdf", width = 10.0, height = 7,#
    onefile = TRUE, encoding = "TeXtext.enc")#
#
drawpage(1, 0, 95)#
drawpage(2, 95, 190)#
drawpage(3, 190, 285)#
drawpage(4, 285, 380)#
drawpage(5, 380, 475)#
drawpage(6, 475, 570)#
drawpage(7, 570, 665)#
drawpage(8, 665, 760)#
drawpage(9, 760, 855)#
drawpage(10, 855, 950)#
#
# genereate exerpt#
#drawpage("exerpt", 120, 260)#
#
dev.off()
stria_score <- read.csv("Stria_score_asNumbers_voiceupdate_fullsheet.csv", sep = ";", dec = ",") #load file#
stria_score$End = stria_score$Start+stria_score$Dur # calc Ends#
#
fader1 <- read.csv2("fader1_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader1 <- fader1[,2:40]#
#
fader2 <- read.csv2("fader2_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader2 <- fader2[,2:40]#
#
fader3 <- read.csv2("fader3_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader3 <- fader3[,2:40]#
#
fader4 <- read.csv2("fader4_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader4 <- fader4[,2:40]#
#
fader9 <- read.csv2("fader1_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader9 <- fader9[,2:40]#
#
fader10 <- read.csv2("fader2_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader10 <- fader10[,2:40]#
#
fader11 <- read.csv2("fader3_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader11 <- fader11[,2:40]#
#
fader12 <- read.csv2("fader4_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader12 <- fader12[,2:40] #
col_scale_fact = 1.0/max(stria_score$Freq[1:383])#
Amp_scale_fact = 0.5/max(stria_score$Amp[1:383])#
print(stria_score$Freq[1:383])#
rows_in_fader_assignment <- c(1:39)#
number_distance = 1#
start = 0#
end = 150#
#
setup <- function(x, y){#
  par(mfcol=c(1,1), mai = c(0.7, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.5) # papiergröße#
  start = x#
  end = y#
  number_distance = 1#
}#
quartzFonts(avenir = c("Avenir Book", "Avenir Black", "Avenir Book Oblique", #
                       "Avenir Black Oblique"))#
#
par(family = 'avenir')#
#
#x="Fader Pl 1"#
plotter <- function(start, end){#
  plot(x = 1,  #
       xlab = "", # axis lable #
       ylab = "",#
       xlim = c(start, end), #
       ylim = c(0, 10), # axis size#
       xaxs = "i",#
       yaxs = "i",#
       main = "",#
       type = "n",#
       yaxt = "n",#
       xaxt = "n")#
  axis(2, at = c( 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5), las = 2, labels = c("", "1", "", "2", "", "3", "", "4", "", "", "1", "", "2", "", "3", "", "4"), tick = FALSE)#
  fader_lines <- c(1, 2, 3, 4, 6, 7, 8, 9)#
  abline(h = fader_lines, col = "grey", lty = "dashed")#
  abline(h = 5, col = "black")#
  mtext("Fbank1",                     # Add title manually#
        side = 2,#
        line = 2,#
        las = 2,#
        at = 3,#
        cex = 0.8,#
        font = 3)#
  mtext("Fbank2",                     # Add title manually#
        side = 2,#
        line = 2,#
        las = 2,#
        at = 8,#
        cex = 0.8,#
        font = 3)#
  #steps = c(0:95)*10#
  #for (l in steps){#
  #  abline(v = steps, col = "grey", lty = "dashed")#
  #	}#
}#
#
#drawform <- function (x){#
#abline(v = stria_score$Start[32], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[46], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[144], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[235], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[311], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[358], col = "red", lty = "dashed")#
#}#
#
getx <- function (x)#
{#
  switch(x, #
         {},#
         {xx <- c(0, 4096, 8192, 12288, 16384, 0)}, #
         {xx <- c(0, 2094, 5246, 12620, 13913, 16384, 0)},#
         {xx <- c(0, 1500, 2500, 3220, 4220, 5464, 16384, 0)},#
         {xx <- c(0, 2525, 5990, 9994, 11345, 16384, 0)},#
         {xx <- c(0, 3276, 6552, 9828, 16384, 0)},#
         {xx <- c(0, 3000, 3010, 3100, 6034, 7415, 8967, 11296, 16384, 0)},#
         {xx <- c(0, 2071, 3279, 3712, 3889, 4580, 5270, 6478, 7253, 8113, 10093, 11557, 16384, 0)}#
  )#
}#
#
gety <- function (y)#
{#
  switch(y, #
         {},#
         {yy <- c(0, 0.33,  1,  0.33, 0, 0)},#
         {yy <- c(1, 0.543, 0.367, 0.2037, 0.0845, 0, 0)},#
         {yy <- c(1, 0.4, 0.2, 0.15, 0.08, 0, 0, 0)},#
         {yy <- c(0.6904, 1, 0.71, 0.255, 0.15, 0, 0)},#
         {yy <- c(-0.5, 0.04, 0.08, 0.01, 0.03, 0)},#
         {yy <- c(0, 0.35, 0.85, 1, 0.857, 0.44, 0.214, 0.107, 0, 0)},#
         {yy <- c(0, 0.135, 0.27, 0.416, 0.827, 0.949, 0.998, 1, 0.916, 0.7, 0.365, 0.234, 0, 0)}#
  )#
}#
#
f <- function (l, r , x, y, a, o, c)# left right start, end, amplitude, offset=freq, c=color#
{#
  polygon((x+getx(l)*(y-x)/16384),(gety(l)*a+o), col = grey(c))#
  polygon((x+getx(r)*(y-x)/16384),(gety(r)*-1*a+o), col = grey(c))#
}#
print(stria_score$ampF[1:383])#
print(stria_score$IAF[1:383])#
print(stria_score$Amp[1:383])#
#x=fader1 y=1#
drawfader <- function (x, y){#
  for (s in rows_in_fader_assignment) { # go through rows fader sheet, 39 is max number of events per fader#
  	print(length(x[s, ])#
    for (k in x[s, ]) { # k event number, that refers to the line in full sheet#
      if (!is.na(k)){#
        #print(x[s,])#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
        if(s==1) {#
        text(stria_score$Start[k]-number_distance,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = k, cex = 1.5)#
        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
      }#
    }#
  }#
}#
drawfaderB <- function (x, y){#
  for (s in rows_in_fader_assignment) {#
    for (k in x[s, ]) {#
      if (!is.na(k)){#
        #print(k)#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001, col = "red") # event lines#
        col_r <- col_scale_fact*stria_score$Freq[k]	#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
        text(stria_score$Start[k]-number_distance,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = k, cex = 1.5)#
        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
      }#
    }#
  }#
} #
#
drawpage <- function (nr,beg, end)#
{#
  setup (beg, end)#
  plotter(beg, end)#
  mtext("Stria by John Chowning Performancescore",                     # Add Titel manually#
        side = 3,#
        line = 2,#
        cex = 0.5#
        )#
  mtext(nr,                     # Add Pagenumber manually#
        side = 3,#
        line = 2,#
        cex = 0.5,#
        adj=1#
        )#
  drawfader(fader1, 1)#
  drawfader(fader2, 2)#
  drawfader(fader3, 3)#
  drawfader(fader4, 4)#
  drawfaderB(fader9,  6)#
  drawfaderB(fader10, 7)#
  drawfaderB(fader11, 8)#
  drawfaderB(fader12, 9)#
}#
# generate score#
#
 if plot to pdf#
pdf("~/Desktop/Stria_Pt12.pdf", width = 10.0, height = 7,#
    onefile = TRUE, encoding = "TeXtext.enc")#
#
drawpage(1, 0, 95)#
drawpage(2, 95, 190)#
drawpage(3, 190, 285)#
drawpage(4, 285, 380)#
drawpage(5, 380, 475)#
drawpage(6, 475, 570)#
drawpage(7, 570, 665)#
drawpage(8, 665, 760)#
drawpage(9, 760, 855)#
drawpage(10, 855, 950)#
#
# genereate exerpt#
#drawpage("exerpt", 120, 260)#
#
dev.off()
drawfader <- function (x, y){#
  for (s in rows_in_fader_assignment) { # go through rows fader sheet, 39 is max number of events per fader#
  	print(length(x[s, ])#
    for (k in x[s, ]) { # k event number, that refers to the line in full sheet#
      if (!is.na(k)){#
        #print(x[s,])#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
        if(s==1) {#
        text(stria_score$Start[k]-number_distance,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = k, cex = 1.5)#
        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
           }#
      }#
    }#
  }#
}
stria_score <- read.csv("Stria_score_asNumbers_voiceupdate_fullsheet.csv", sep = ";", dec = ",") #load file#
stria_score$End = stria_score$Start+stria_score$Dur # calc Ends#
#
fader1 <- read.csv2("fader1_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader1 <- fader1[,2:40]#
#
fader2 <- read.csv2("fader2_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader2 <- fader2[,2:40]#
#
fader3 <- read.csv2("fader3_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader3 <- fader3[,2:40]#
#
fader4 <- read.csv2("fader4_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader4 <- fader4[,2:40]#
#
fader9 <- read.csv2("fader1_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader9 <- fader9[,2:40]#
#
fader10 <- read.csv2("fader2_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader10 <- fader10[,2:40]#
#
fader11 <- read.csv2("fader3_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader11 <- fader11[,2:40]#
#
fader12 <- read.csv2("fader4_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader12 <- fader12[,2:40] #
col_scale_fact = 1.0/max(stria_score$Freq[1:383])#
Amp_scale_fact = 0.5/max(stria_score$Amp[1:383])#
print(stria_score$Freq[1:383])#
rows_in_fader_assignment <- c(1:39)#
number_distance = 1#
start = 0#
end = 150#
#
setup <- function(x, y){#
  par(mfcol=c(1,1), mai = c(0.7, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.5) # papiergröße#
  start = x#
  end = y#
  number_distance = 1#
}#
quartzFonts(avenir = c("Avenir Book", "Avenir Black", "Avenir Book Oblique", #
                       "Avenir Black Oblique"))#
#
par(family = 'avenir')#
#
#x="Fader Pl 1"#
plotter <- function(start, end){#
  plot(x = 1,  #
       xlab = "", # axis lable #
       ylab = "",#
       xlim = c(start, end), #
       ylim = c(0, 10), # axis size#
       xaxs = "i",#
       yaxs = "i",#
       main = "",#
       type = "n",#
       yaxt = "n",#
       xaxt = "n")#
  axis(2, at = c( 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5), las = 2, labels = c("", "1", "", "2", "", "3", "", "4", "", "", "1", "", "2", "", "3", "", "4"), tick = FALSE)#
  fader_lines <- c(1, 2, 3, 4, 6, 7, 8, 9)#
  abline(h = fader_lines, col = "grey", lty = "dashed")#
  abline(h = 5, col = "black")#
  mtext("Fbank1",                     # Add title manually#
        side = 2,#
        line = 2,#
        las = 2,#
        at = 3,#
        cex = 0.8,#
        font = 3)#
  mtext("Fbank2",                     # Add title manually#
        side = 2,#
        line = 2,#
        las = 2,#
        at = 8,#
        cex = 0.8,#
        font = 3)#
  #steps = c(0:95)*10#
  #for (l in steps){#
  #  abline(v = steps, col = "grey", lty = "dashed")#
  #	}#
}#
#
#drawform <- function (x){#
#abline(v = stria_score$Start[32], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[46], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[144], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[235], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[311], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[358], col = "red", lty = "dashed")#
#}#
#
getx <- function (x)#
{#
  switch(x, #
         {},#
         {xx <- c(0, 4096, 8192, 12288, 16384, 0)}, #
         {xx <- c(0, 2094, 5246, 12620, 13913, 16384, 0)},#
         {xx <- c(0, 1500, 2500, 3220, 4220, 5464, 16384, 0)},#
         {xx <- c(0, 2525, 5990, 9994, 11345, 16384, 0)},#
         {xx <- c(0, 3276, 6552, 9828, 16384, 0)},#
         {xx <- c(0, 3000, 3010, 3100, 6034, 7415, 8967, 11296, 16384, 0)},#
         {xx <- c(0, 2071, 3279, 3712, 3889, 4580, 5270, 6478, 7253, 8113, 10093, 11557, 16384, 0)}#
  )#
}#
#
gety <- function (y)#
{#
  switch(y, #
         {},#
         {yy <- c(0, 0.33,  1,  0.33, 0, 0)},#
         {yy <- c(1, 0.543, 0.367, 0.2037, 0.0845, 0, 0)},#
         {yy <- c(1, 0.4, 0.2, 0.15, 0.08, 0, 0, 0)},#
         {yy <- c(0.6904, 1, 0.71, 0.255, 0.15, 0, 0)},#
         {yy <- c(-0.5, 0.04, 0.08, 0.01, 0.03, 0)},#
         {yy <- c(0, 0.35, 0.85, 1, 0.857, 0.44, 0.214, 0.107, 0, 0)},#
         {yy <- c(0, 0.135, 0.27, 0.416, 0.827, 0.949, 0.998, 1, 0.916, 0.7, 0.365, 0.234, 0, 0)}#
  )#
}#
#
f <- function (l, r , x, y, a, o, c)# left right start, end, amplitude, offset=freq, c=color#
{#
  polygon((x+getx(l)*(y-x)/16384),(gety(l)*a+o), col = grey(c))#
  polygon((x+getx(r)*(y-x)/16384),(gety(r)*-1*a+o), col = grey(c))#
}#
print(stria_score$ampF[1:383])#
print(stria_score$IAF[1:383])#
print(stria_score$Amp[1:383])#
#x=fader1 y=1#
drawfader <- function (x, y){#
  for (s in rows_in_fader_assignment) { # go through rows fader sheet, 39 is max number of events per fader#
  	print(length(x[s, ]))#
    for (k in x[s, ]) { # k event number, that refers to the line in full sheet#
      if (!is.na(k)){#
        #print(x[s,])#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
        if(s==1) {#
        text(stria_score$Start[k]-number_distance,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = k, cex = 1.5)#
        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
           }#
      }#
    }#
  }#
}#
drawfaderB <- function (x, y){#
  for (s in rows_in_fader_assignment) {#
    for (k in x[s, ]) {#
      if (!is.na(k)){#
        #print(k)#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001, col = "red") # event lines#
        col_r <- col_scale_fact*stria_score$Freq[k]	#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
        text(stria_score$Start[k]-number_distance,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = k, cex = 1.5)#
        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
      }#
    }#
  }#
} #
#
drawpage <- function (nr,beg, end)#
{#
  setup (beg, end)#
  plotter(beg, end)#
  mtext("Stria by John Chowning Performancescore",                     # Add Titel manually#
        side = 3,#
        line = 2,#
        cex = 0.5#
        )#
  mtext(nr,                     # Add Pagenumber manually#
        side = 3,#
        line = 2,#
        cex = 0.5,#
        adj=1#
        )#
  drawfader(fader1, 1)#
  drawfader(fader2, 2)#
  drawfader(fader3, 3)#
  drawfader(fader4, 4)#
  drawfaderB(fader9,  6)#
  drawfaderB(fader10, 7)#
  drawfaderB(fader11, 8)#
  drawfaderB(fader12, 9)#
}#
# generate score#
#
 if plot to pdf#
pdf("~/Desktop/Stria_Pt12.pdf", width = 10.0, height = 7,#
    onefile = TRUE, encoding = "TeXtext.enc")#
#
drawpage(1, 0, 95)#
drawpage(2, 95, 190)#
drawpage(3, 190, 285)#
drawpage(4, 285, 380)#
drawpage(5, 380, 475)#
drawpage(6, 475, 570)#
drawpage(7, 570, 665)#
drawpage(8, 665, 760)#
drawpage(9, 760, 855)#
drawpage(10, 855, 950)#
#
# genereate exerpt#
#drawpage("exerpt", 120, 260)#
#
dev.off()
stria_score <- read.csv("Stria_score_asNumbers_voiceupdate_fullsheet.csv", sep = ";", dec = ",") #load file#
stria_score$End = stria_score$Start+stria_score$Dur # calc Ends#
#
fader1 <- read.csv2("fader1_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader1 <- fader1[,2:40]#
#
fader2 <- read.csv2("fader2_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader2 <- fader2[,2:40]#
#
fader3 <- read.csv2("fader3_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader3 <- fader3[,2:40]#
#
fader4 <- read.csv2("fader4_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader4 <- fader4[,2:40]#
#
fader9 <- read.csv2("fader1_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader9 <- fader9[,2:40]#
#
fader10 <- read.csv2("fader2_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader10 <- fader10[,2:40]#
#
fader11 <- read.csv2("fader3_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader11 <- fader11[,2:40]#
#
fader12 <- read.csv2("fader4_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader12 <- fader12[,2:40] #
col_scale_fact = 1.0/max(stria_score$Freq[1:383])#
Amp_scale_fact = 0.5/max(stria_score$Amp[1:383])#
print(stria_score$Freq[1:383])#
rows_in_fader_assignment <- c(1:39)#
number_distance = 1#
start = 0#
end = 150#
#
setup <- function(x, y){#
  par(mfcol=c(1,1), mai = c(0.7, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.5) # papiergröße#
  start = x#
  end = y#
  number_distance = 1#
}#
quartzFonts(avenir = c("Avenir Book", "Avenir Black", "Avenir Book Oblique", #
                       "Avenir Black Oblique"))#
#
par(family = 'avenir')#
#
#x="Fader Pl 1"#
plotter <- function(start, end){#
  plot(x = 1,  #
       xlab = "", # axis lable #
       ylab = "",#
       xlim = c(start, end), #
       ylim = c(0, 10), # axis size#
       xaxs = "i",#
       yaxs = "i",#
       main = "",#
       type = "n",#
       yaxt = "n",#
       xaxt = "n")#
  axis(2, at = c( 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5), las = 2, labels = c("", "1", "", "2", "", "3", "", "4", "", "", "1", "", "2", "", "3", "", "4"), tick = FALSE)#
  fader_lines <- c(1, 2, 3, 4, 6, 7, 8, 9)#
  abline(h = fader_lines, col = "grey", lty = "dashed")#
  abline(h = 5, col = "black")#
  mtext("Fbank1",                     # Add title manually#
        side = 2,#
        line = 2,#
        las = 2,#
        at = 3,#
        cex = 0.8,#
        font = 3)#
  mtext("Fbank2",                     # Add title manually#
        side = 2,#
        line = 2,#
        las = 2,#
        at = 8,#
        cex = 0.8,#
        font = 3)#
  #steps = c(0:95)*10#
  #for (l in steps){#
  #  abline(v = steps, col = "grey", lty = "dashed")#
  #	}#
}#
#
#drawform <- function (x){#
#abline(v = stria_score$Start[32], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[46], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[144], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[235], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[311], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[358], col = "red", lty = "dashed")#
#}#
#
getx <- function (x)#
{#
  switch(x, #
         {},#
         {xx <- c(0, 4096, 8192, 12288, 16384, 0)}, #
         {xx <- c(0, 2094, 5246, 12620, 13913, 16384, 0)},#
         {xx <- c(0, 1500, 2500, 3220, 4220, 5464, 16384, 0)},#
         {xx <- c(0, 2525, 5990, 9994, 11345, 16384, 0)},#
         {xx <- c(0, 3276, 6552, 9828, 16384, 0)},#
         {xx <- c(0, 3000, 3010, 3100, 6034, 7415, 8967, 11296, 16384, 0)},#
         {xx <- c(0, 2071, 3279, 3712, 3889, 4580, 5270, 6478, 7253, 8113, 10093, 11557, 16384, 0)}#
  )#
}#
#
gety <- function (y)#
{#
  switch(y, #
         {},#
         {yy <- c(0, 0.33,  1,  0.33, 0, 0)},#
         {yy <- c(1, 0.543, 0.367, 0.2037, 0.0845, 0, 0)},#
         {yy <- c(1, 0.4, 0.2, 0.15, 0.08, 0, 0, 0)},#
         {yy <- c(0.6904, 1, 0.71, 0.255, 0.15, 0, 0)},#
         {yy <- c(-0.5, 0.04, 0.08, 0.01, 0.03, 0)},#
         {yy <- c(0, 0.35, 0.85, 1, 0.857, 0.44, 0.214, 0.107, 0, 0)},#
         {yy <- c(0, 0.135, 0.27, 0.416, 0.827, 0.949, 0.998, 1, 0.916, 0.7, 0.365, 0.234, 0, 0)}#
  )#
}#
#
f <- function (l, r , x, y, a, o, c)# left right start, end, amplitude, offset=freq, c=color#
{#
  polygon((x+getx(l)*(y-x)/16384),(gety(l)*a+o), col = grey(c))#
  polygon((x+getx(r)*(y-x)/16384),(gety(r)*-1*a+o), col = grey(c))#
}#
print(stria_score$ampF[1:383])#
print(stria_score$IAF[1:383])#
print(stria_score$Amp[1:383])#
#x=fader1 y=1#
drawfader <- function (x, y){#
  for (s in rows_in_fader_assignment) { # go through rows fader sheet, 39 is max number of events per fader#
  	#print(length(x[s, ]))#
    for (k in x[s, ]) { # k event number, that refers to the line in full sheet#
      if (!is.na(k)){#
        #print(x[s,])#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
        if(s==1) {#
        text(stria_score$Start[k]-number_distance,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = k, cex = 1.5)#
        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
           }#
      }#
    }#
  }#
}#
drawfaderB <- function (x, y){#
  for (s in rows_in_fader_assignment) {#
    for (k in x[s, ]) {#
      if (!is.na(k)){#
        #print(k)#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001, col = "red") # event lines#
        col_r <- col_scale_fact*stria_score$Freq[k]	#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
        text(stria_score$Start[k]-number_distance,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = k, cex = 1.5)#
        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
      }#
    }#
  }#
} #
#
drawpage <- function (nr,beg, end)#
{#
  setup (beg, end)#
  plotter(beg, end)#
  mtext("Stria by John Chowning Performancescore",                     # Add Titel manually#
        side = 3,#
        line = 2,#
        cex = 0.5#
        )#
  mtext(nr,                     # Add Pagenumber manually#
        side = 3,#
        line = 2,#
        cex = 0.5,#
        adj=1#
        )#
  drawfader(fader1, 1)#
  drawfader(fader2, 2)#
  drawfader(fader3, 3)#
  drawfader(fader4, 4)#
  drawfaderB(fader9,  6)#
  drawfaderB(fader10, 7)#
  drawfaderB(fader11, 8)#
  drawfaderB(fader12, 9)#
}#
# generate score#
#
 if plot to pdf#
pdf("~/Desktop/Stria_Pt12.pdf", width = 10.0, height = 7,#
    onefile = TRUE, encoding = "TeXtext.enc")#
#
drawpage(1, 0, 95)#
drawpage(2, 95, 190)#
drawpage(3, 190, 285)#
drawpage(4, 285, 380)#
drawpage(5, 380, 475)#
drawpage(6, 475, 570)#
drawpage(7, 570, 665)#
drawpage(8, 665, 760)#
drawpage(9, 760, 855)#
drawpage(10, 855, 950)#
#
# genereate exerpt#
#drawpage("exerpt", 120, 260)#
#
dev.off()
stria_score <- read.csv("Stria_score_asNumbers_voiceupdate_fullsheet.csv", sep = ";", dec = ",") #load file#
stria_score$End = stria_score$Start+stria_score$Dur # calc Ends#
#
fader1 <- read.csv2("fader1_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader1 <- fader1[,2:40]#
#
fader2 <- read.csv2("fader2_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader2 <- fader2[,2:40]#
#
fader3 <- read.csv2("fader3_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader3 <- fader3[,2:40]#
#
fader4 <- read.csv2("fader4_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader4 <- fader4[,2:40]#
#
fader9 <- read.csv2("fader1_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader9 <- fader9[,2:40]#
#
fader10 <- read.csv2("fader2_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader10 <- fader10[,2:40]#
#
fader11 <- read.csv2("fader3_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader11 <- fader11[,2:40]#
#
fader12 <- read.csv2("fader4_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader12 <- fader12[,2:40]
stria_score <- read.csv("Stria_score_asNumbers_voiceupdate_fullsheet.csv", sep = ";", dec = ",") #load file#
stria_score$End = stria_score$Start+stria_score$Dur # calc Ends#
#
fader1 <- read.csv2("fader1_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader1 <- fader1[,2:40]#
#
fader2 <- read.csv2("fader2_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader2 <- fader2[,2:40]#
#
fader3 <- read.csv2("fader3_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader3 <- fader3[,2:40]#
#
fader4 <- read.csv2("fader4_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader4 <- fader4[,2:40]#
#
fader9 <- read.csv2("fader1_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader9 <- fader9[,2:40]#
#
fader10 <- read.csv2("fader2_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader10 <- fader10[,2:40]#
#
fader11 <- read.csv2("fader3_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader11 <- fader11[,2:40]#
#
fader12 <- read.csv2("fader4_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader12 <- fader12[,2:40] #
col_scale_fact = 1.0/max(stria_score$Freq[1:383])#
Amp_scale_fact = 0.5/max(stria_score$Amp[1:383])#
print(stria_score$Freq[1:383])#
rows_in_fader_assignment <- c(1:39)#
number_distance = 1#
start = 0#
end = 150#
#
setup <- function(x, y){#
  par(mfcol=c(1,1), mai = c(0.7, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.5) # papiergröße#
  start = x#
  end = y#
  number_distance = 1#
}#
quartzFonts(avenir = c("Avenir Book", "Avenir Black", "Avenir Book Oblique", #
                       "Avenir Black Oblique"))#
#
par(family = 'avenir')#
#
#x="Fader Pl 1"#
plotter <- function(start, end){#
  plot(x = 1,  #
       xlab = "", # axis lable #
       ylab = "",#
       xlim = c(start, end), #
       ylim = c(0, 10), # axis size#
       xaxs = "i",#
       yaxs = "i",#
       main = "",#
       type = "n",#
       yaxt = "n",#
       xaxt = "n")#
  axis(2, at = c( 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5), las = 2, labels = c("", "1", "", "2", "", "3", "", "4", "", "", "1", "", "2", "", "3", "", "4"), tick = FALSE)#
  fader_lines <- c(1, 2, 3, 4, 6, 7, 8, 9)#
  abline(h = fader_lines, col = "grey", lty = "dashed")#
  abline(h = 5, col = "black")#
  mtext("Fbank1",                     # Add title manually#
        side = 2,#
        line = 2,#
        las = 2,#
        at = 3,#
        cex = 0.8,#
        font = 3)#
  mtext("Fbank2",                     # Add title manually#
        side = 2,#
        line = 2,#
        las = 2,#
        at = 8,#
        cex = 0.8,#
        font = 3)#
  #steps = c(0:95)*10#
  #for (l in steps){#
  #  abline(v = steps, col = "grey", lty = "dashed")#
  #	}#
}#
#
#drawform <- function (x){#
#abline(v = stria_score$Start[32], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[46], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[144], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[235], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[311], col = "red", lty = "dashed")#
#abline(v = stria_score$Start[358], col = "red", lty = "dashed")#
#}#
#
getx <- function (x)#
{#
  switch(x, #
         {},#
         {xx <- c(0, 4096, 8192, 12288, 16384, 0)}, #
         {xx <- c(0, 2094, 5246, 12620, 13913, 16384, 0)},#
         {xx <- c(0, 1500, 2500, 3220, 4220, 5464, 16384, 0)},#
         {xx <- c(0, 2525, 5990, 9994, 11345, 16384, 0)},#
         {xx <- c(0, 3276, 6552, 9828, 16384, 0)},#
         {xx <- c(0, 3000, 3010, 3100, 6034, 7415, 8967, 11296, 16384, 0)},#
         {xx <- c(0, 2071, 3279, 3712, 3889, 4580, 5270, 6478, 7253, 8113, 10093, 11557, 16384, 0)}#
  )#
}#
#
gety <- function (y)#
{#
  switch(y, #
         {},#
         {yy <- c(0, 0.33,  1,  0.33, 0, 0)},#
         {yy <- c(1, 0.543, 0.367, 0.2037, 0.0845, 0, 0)},#
         {yy <- c(1, 0.4, 0.2, 0.15, 0.08, 0, 0, 0)},#
         {yy <- c(0.6904, 1, 0.71, 0.255, 0.15, 0, 0)},#
         {yy <- c(-0.5, 0.04, 0.08, 0.01, 0.03, 0)},#
         {yy <- c(0, 0.35, 0.85, 1, 0.857, 0.44, 0.214, 0.107, 0, 0)},#
         {yy <- c(0, 0.135, 0.27, 0.416, 0.827, 0.949, 0.998, 1, 0.916, 0.7, 0.365, 0.234, 0, 0)}#
  )#
}#
#
f <- function (l, r , x, y, a, o, c)# left right start, end, amplitude, offset=freq, c=color#
{#
  polygon((x+getx(l)*(y-x)/16384),(gety(l)*a+o), col = grey(c))#
  polygon((x+getx(r)*(y-x)/16384),(gety(r)*-1*a+o), col = grey(c))#
}#
print(stria_score$ampF[1:383])#
print(stria_score$IAF[1:383])#
print(stria_score$Amp[1:383])#
#x=fader1 y=1#
drawfader <- function (x, y){#
  for (s in rows_in_fader_assignment) { # go through rows fader sheet, 39 is max number of events per fader#
  	#print(length(x[s, ]))#
    for (k in x[s, ]) { # k event number, that refers to the line in full sheet#
      if (!is.na(k)){#
        #print(x[s,])#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
        if(s==1) {#
        text(stria_score$Start[k]-number_distance,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = k, cex = 1.5)#
        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
           }#
      }#
    }#
  }#
}#
drawfaderB <- function (x, y){#
  for (s in rows_in_fader_assignment) {#
    for (k in x[s, ]) {#
      if (!is.na(k)){#
        #print(k)#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001, col = "red") # event lines#
        col_r <- col_scale_fact*stria_score$Freq[k]	#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
        text(stria_score$Start[k]-number_distance,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = k, cex = 1.5)#
        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
      }#
    }#
  }#
} #
#
drawpage <- function (nr,beg, end)#
{#
  setup (beg, end)#
  plotter(beg, end)#
  mtext("Stria by John Chowning Performancescore",                     # Add Titel manually#
        side = 3,#
        line = 2,#
        cex = 0.5#
        )#
  mtext(nr,                     # Add Pagenumber manually#
        side = 3,#
        line = 2,#
        cex = 0.5,#
        adj=1#
        )#
  drawfader(fader1, 1)#
  drawfader(fader2, 2)#
  drawfader(fader3, 3)#
  drawfader(fader4, 4)#
  drawfaderB(fader9,  6)#
  drawfaderB(fader10, 7)#
  drawfaderB(fader11, 8)#
  drawfaderB(fader12, 9)#
}#
# generate score#
#
 if plot to pdf#
pdf("~/Desktop/Stria_Pt12.pdf", width = 10.0, height = 7,#
    onefile = TRUE, encoding = "TeXtext.enc")#
#
drawpage(1, 0, 95)#
drawpage(2, 95, 190)#
drawpage(3, 190, 285)#
drawpage(4, 285, 380)#
drawpage(5, 380, 475)#
drawpage(6, 475, 570)#
drawpage(7, 570, 665)#
drawpage(8, 665, 760)#
drawpage(9, 760, 855)#
drawpage(10, 855, 950)#
#
# genereate exerpt#
#drawpage("exerpt", 120, 260)#
#
dev.off()
stria_score <- read.csv("Stria_score_asNumbers_voiceupdate_fullsheet.csv", sep = ";", dec = ",") #load file#
stria_score$End = stria_score$Start+stria_score$Dur # calc Ends#
#
fader1 <- read.csv2("fader1_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader1 <- fader1[,2:40]#
#
fader2 <- read.csv2("fader2_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader2 <- fader2[,2:40]#
#
fader3 <- read.csv2("fader3_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader3 <- fader3[,2:40]#
#
fader4 <- read.csv2("fader4_1.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader4 <- fader4[,2:40]#
#
fader9 <- read.csv2("fader1_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader9 <- fader9[,2:40]#
#
fader10 <- read.csv2("fader2_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader10 <- fader10[,2:40]#
#
fader11 <- read.csv2("fader3_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader11 <- fader11[,2:40]#
#
fader12 <- read.csv2("fader4_2.txt", sep = " ", header = FALSE, comment.char = ";", col.names = paste("V",1:40)) # load file#
fader12 <- fader12[,2:40]
path <- "/Users/hofmann-alex/Programming/stria_live_electronics/data/score_as_csv/Stria_score_asNumbers_FaderCC.csv"
stria_score <- read.csv(path, sep = ",", dec = ".") # load file
stria_score$End = stria_score$Start+stria_score$Dur # calc Ends
getx <- function (x)#
{#
  switch(x, #
         {},#
         {xx <- c(0, 4096, 8192, 12288, 16384, 0)}, #
         {xx <- c(0, 2094, 5246, 12620, 13913, 16384, 0)},#
         {xx <- c(0, 1500, 2500, 3220, 4220, 5464, 16384, 0)},#
         {xx <- c(0, 2525, 5990, 9994, 11345, 16384, 0)},#
         {xx <- c(0, 3276, 6552, 9828, 16384, 0)},#
         {xx <- c(0, 3000, 3010, 3100, 6034, 7415, 8967, 11296, 16384, 0)},#
         {xx <- c(0, 2071, 3279, 3712, 3889, 4580, 5270, 6478, 7253, 8113, 10093, 11557, 16384, 0)}#
  )#
}#
#
gety <- function (y)#
{#
  switch(y, #
         {},#
         {yy <- c(0, 0.33,  1,  0.33, 0, 0)},#
         {yy <- c(1, 0.543, 0.367, 0.2037, 0.0845, 0, 0)},#
         {yy <- c(1, 0.4, 0.2, 0.15, 0.08, 0, 0, 0)},#
         {yy <- c(0.6904, 1, 0.71, 0.255, 0.15, 0, 0)},#
         {yy <- c(-0.5, 0.04, 0.08, 0.01, 0.03, 0)},#
         {yy <- c(0, 0.35, 0.85, 1, 0.857, 0.44, 0.214, 0.107, 0, 0)},#
         {yy <- c(0, 0.135, 0.27, 0.416, 0.827, 0.949, 0.998, 1, 0.916, 0.7, 0.365, 0.234, 0, 0)}#
  )#
}#
#
f <- function (l, r , x, y, a, o, c)# left right start, end, amplitude, offset=freq, c=color#
{#
  polygon((x+getx(l)*(y-x)/16384),(gety(l)*a+o), col = grey(c))#
  polygon((x+getx(r)*(y-x)/16384),(gety(r)*-1*a+o), col = grey(c))#
}
col_scale_fact = 1.0/max(stria_score$Freq[1:383]) # scaling factors
Amp_scale_fact = 0.5/max(stria_score$Amp[1:383])
# shapes of Buffers # todo check these hardcoded numbers!#
getx <- function (x)#
{#
  switch(x, #
         {},#
         {xx <- c(0, 4096, 8192, 12288, 16384, 0)}, #
         {xx <- c(0, 2094, 5246, 12620, 13913, 16384, 0)},#
         {xx <- c(0, 1500, 2500, 3220, 4220, 5464, 16384, 0)},#
         {xx <- c(0, 2525, 5990, 9994, 11345, 16384, 0)},#
         {xx <- c(0, 3276, 6552, 9828, 16384, 0)},#
         {xx <- c(0, 3000, 3010, 3100, 6034, 7415, 8967, 11296, 16384, 0)},#
         {xx <- c(0, 2071, 3279, 3712, 3889, 4580, 5270, 6478, 7253, 8113, 10093, 11557, 16384, 0)}#
  )#
}#
#
gety <- function (y)#
{#
  switch(y, #
         {},#
         {yy <- c(0, 0.33,  1,  0.33, 0, 0)},#
         {yy <- c(1, 0.543, 0.367, 0.2037, 0.0845, 0, 0)},#
         {yy <- c(1, 0.4, 0.2, 0.15, 0.08, 0, 0, 0)},#
         {yy <- c(0.6904, 1, 0.71, 0.255, 0.15, 0, 0)},#
         {yy <- c(-0.5, 0.04, 0.08, 0.01, 0.03, 0)},#
         {yy <- c(0, 0.35, 0.85, 1, 0.857, 0.44, 0.214, 0.107, 0, 0)},#
         {yy <- c(0, 0.135, 0.27, 0.416, 0.827, 0.949, 0.998, 1, 0.916, 0.7, 0.365, 0.234, 0, 0)}#
  )#
}#
#
f <- function (l, r , x, y, a, o, c)# left right start, end, amplitude, offset=freq, c=color#
{#
  polygon((x+getx(l)*(y-x)/16384),(gety(l)*a+o), col = grey(c))#
  polygon((x+getx(r)*(y-x)/16384),(gety(r)*-1*a+o), col = grey(c))#
}
quartzFonts(avenir = c("Avenir Book", "Avenir Black", "Avenir Book Oblique",
par(family = 'avenir')
"Avenir Black Oblique"))
quartzFonts(avenir = c("Avenir Book", "Avenir Black", "Avenir Book Oblique", "Avenir Black Oblique"))
par(family = 'avenir')
number_distance = 1.4
drawpage <- function (nr,beg, end)#
{#
    par(mfcol=c(1,1), mai = c(0.7, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.5) # papiergröße#
  plotter(beg, end)#
  mtext("Stria by John Chowning Performancescore",                     # Add Titel manually#
        side = 3,#
        line = 2,#
        cex = 0.5#
        )#
  mtext(nr,                     # Add Pagenumber manually#
        side = 3,#
        line = 2,#
        cex = 0.5,#
        adj=1#
        )#
  #drawfader(fader1, 1)#
  #drawfader(fader2, 2)#
  #drawfader(fader3, 3)#
  #drawfader(fader4, 4)#
  #drawfaderB(fader9,  6)#
  #drawfaderB(fader10, 7)#
  #drawfaderB(fader11, 8)#
  #drawfaderB(fader12, 9)#
}
drawpage(2, 95, 190)
#x="Fader Pl 1"#
plotter <- function(start, end){#
  plot(x = 1,  #
       xlab = "", # axis lable #
       ylab = "",#
       xlim = c(start, end), #
       ylim = c(0, 10), # axis size#
       xaxs = "i",#
       yaxs = "i",#
       main = "",#
       type = "n",#
       yaxt = "n",#
       xaxt = "n")#
  axis(2, at = c( 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5), las = 2, labels = c("", "1", "", "2", "", "3", "", "4", "", "", "1", "", "2", "", "3", "", "4"), tick = FALSE)#
  fader_lines <- c(1, 2, 3, 4, 6, 7, 8, 9)#
  abline(h = fader_lines, col = "grey", lty = "dashed")#
  abline(h = 5, col = "black")#
  mtext("Fbank1",                     # Add title manually#
        side = 2,#
        line = 2,#
        las = 2,#
        at = 3,#
        cex = 0.8,#
        font = 3)#
  mtext("Fbank2",                     # Add title manually#
        side = 2,#
        line = 2,#
        las = 2,#
        at = 8,#
        cex = 0.8,#
        font = 3)#
  #steps = c(0:95)*10#
  #for (l in steps){#
  #  abline(v = steps, col = "grey", lty = "dashed")#
  #	}#
}
drawpage(2, 95, 190)
str(stria_score)
old_s = 0#
drawfader <- function (y){#
    for (k in stria_score$Event_num) { # k event number, that refers to the line in full sheet#
      if (!is.na(k)){#
      	print(s)#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
        if(s != old_s) {#
	        text(stria_score$Start[k]-number_distance,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = k, cex = 1.5)#
	             }#
	        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
       old_s = s#
      }#
    }#
  }#
}#
drawpage <- function (nr,beg, end)#
{#
    par(mfcol=c(1,1), mai = c(0.7, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.5) # papiergröße#
  plotter(beg, end)#
  mtext("Stria by John Chowning Performancescore",                     # Add Titel manually#
        side = 3,#
        line = 2,#
        cex = 0.5#
        )#
  mtext(nr,                     # Add Pagenumber manually#
        side = 3,#
        line = 2,#
        cex = 0.5,#
        adj=1#
        )#
  drawfader(1)#
  #drawfader(fader2, 2)#
  #drawfader(fader3, 3)#
  #drawfader(fader4, 4)#
  #drawfaderB(fader9,  6)#
  #drawfaderB(fader10, 7)#
  #drawfaderB(fader11, 8)#
  #drawfaderB(fader12, 9)#
}
old_s = 0#
drawfader <- function (y){#
    for (k in stria_score$Event_num) { # k event number, that refers to the line in full sheet#
      if (!is.na(k)){#
      	print(s)#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
        if(s != old_s) {#
	        text(stria_score$Start[k]-number_distance,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = k, cex = 1.5)#
	             }#
	        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
       old_s = s#
      }#
    }#
}#
drawpage <- function (nr,beg, end)#
{#
    par(mfcol=c(1,1), mai = c(0.7, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.5) # papiergröße#
  plotter(beg, end)#
  mtext("Stria by John Chowning Performancescore",                     # Add Titel manually#
        side = 3,#
        line = 2,#
        cex = 0.5#
        )#
  mtext(nr,                     # Add Pagenumber manually#
        side = 3,#
        line = 2,#
        cex = 0.5,#
        adj=1#
        )#
  drawfader(1)#
  #drawfader(fader2, 2)#
  #drawfader(fader3, 3)#
  #drawfader(fader4, 4)#
  #drawfaderB(fader9,  6)#
  #drawfaderB(fader10, 7)#
  #drawfaderB(fader11, 8)#
  #drawfaderB(fader12, 9)#
}
drawpage(2, 95, 190)
old_s = 0#
drawfader <- function (y){#
    for (k in stria_score$Event_num) { # k event number, that refers to the line in full sheet#
      if (!is.na(k)){#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
        if(s != old_s) {#
	        text(stria_score$Start[k]-number_distance,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = k, cex = 1.5)#
	             }#
	        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
       old_s = s#
      }#
    }#
}
drawpage(2, 95, 190)
old_s = 0#
drawfader <- function (y){#
    for (k in stria_score$Event_num) { # k event number, that refers to the line in full sheet#
      if (!is.na(k)){#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
       # if(s != old_s) { # cluster get only one event number#
	        text(stria_score$Start[k]-number_distance,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = k, cex = 1.5)#
	             }#
	        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
       #old_s = s#
      #}#
    }#
}
drawpage(2, 95, 190)
old_s = 0#
drawfader <- function (y){#
    for (k in stria_score$Event_num) { # k event number, that refers to the line in full sheet#
      if (!is.na(k) & stria_score$MidiFaderCC == y){#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
       # if(s != old_s) { # cluster get only one event number#
	        text(stria_score$Start[k]-number_distance,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = k, cex = 1.5)#
	             }#
	        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
       #old_s = s#
      #}#
    }#
}
drawpage(2, 95, 190)
old_s = 0#
drawfader <- function (y){#
    for (k in stria_score$Event_num) { # k event number, that refers to the line in full sheet#
      if (!is.na(k) && stria_score$MidiFaderCC == y){#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
       # if(s != old_s) { # cluster get only one event number#
	        text(stria_score$Start[k]-number_distance,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = k, cex = 1.5)#
	             }#
	        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
       #old_s = s#
      #}#
    }#
}
drawpage(2, 95, 190)
old_s = 0#
drawfader <- function (y){#
    for (k in stria_score$Event_num) { # k event number, that refers to the line in full sheet#
      if (!is.na(k) && stria_score$MidiFaderCC[k] == y){#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
       # if(s != old_s) { # cluster get only one event number#
	        text(stria_score$Start[k]-number_distance,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = k, cex = 1.5)#
	             }#
	        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
       #old_s = s#
      #}#
    }#
}
drawpage(2, 95, 190)
old_s = 0#
s = 1#
drawfader <- function (y){#
    for (k in stria_score$Event_num) { # k event number, that refers to the line in full sheet#
      if (!is.na(k) && stria_score$MidiFaderCC[k] == y){#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
       if(s != old_s) { # cluster get only one event number#
	        text(stria_score$Start[k]-number_distance,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = k, cex = 1.5)#
	             }#
	        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
       #old_s = s#
      }#
    }#
}
drawpage(2, 95, 190)
drawpage <- function (nr,beg, end)#
{#
    par(mfcol=c(1,1), mai = c(0.7, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.5) # papiergröße#
  plotter(beg, end)#
  mtext("Stria by John Chowning Performancescore",                     # Add Titel manually#
        side = 3,#
        line = 2,#
        cex = 0.5#
        )#
  mtext(nr,                     # Add Pagenumber manually#
        side = 3,#
        line = 2,#
        cex = 0.5,#
        adj=1#
        )#
  drawfader(0)#
  drawfader(1)#
  #drawfader(fader2, 2)#
  #drawfader(fader3, 3)#
  #drawfader(fader4, 4)#
  #drawfaderB(fader9,  6)#
  #drawfaderB(fader10, 7)#
  #drawfaderB(fader11, 8)#
  #drawfaderB(fader12, 9)#
}
drawpage(2, 95, 190)
drawpage <- function (nr,beg, end)#
{#
    par(mfcol=c(1,1), mai = c(0.7, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.5) # papiergröße#
  plotter(beg, end)#
  mtext("Stria by John Chowning Performancescore",                     # Add Titel manually#
        side = 3,#
        line = 2,#
        cex = 0.5#
        )#
  mtext(nr,                     # Add Pagenumber manually#
        side = 3,#
        line = 2,#
        cex = 0.5,#
        adj=1#
        )#
  for (fader_CC in 0:7){#
  	drawfader(fader_CC)#
    }#
#
}
drawpage(2, 95, 190)
for (k in stria_score$Event_num) { # k event number, that refers to the line in full sheet#
	if (k > 1 && stria_score$MidiFaderCC[k] == stria_score$MidiFaderCC[k-1])#
	{#
		print(k)#
		print("same as last")#
	}#
}
stria_score$isCluster <- FALSE
str(stria_score)
for (k in stria_score$Event_num) { # k event number, that refers to the line in full sheet#
	if (k > 1 && stria_score$MidiFaderCC[k] == stria_score$MidiFaderCC[k-1])#
	{#
		print(k)#
		print("same as last")#
		stria_score$isCluster[k] = TRUE#
	}#
}
str(stria_score)
old_s = 0#
s = 1#
drawfader <- function (y){#
    for (k in stria_score$Event_num) { # k event number, that refers to the line in full sheet#
      if (!is.na(k) && stria_score$MidiFaderCC[k] == y){#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
       if(!stria_score$isCluster[k]) { # cluster get only one event number#
	        text(stria_score$Start[k]-number_distance,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = k, cex = 1.5)#
	             }#
	        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
       #old_s = s#
      }#
    }#
}
drawpage(2, 95, 190)
stria_score
fader_CC = 0
events <- stria_score$MidiFaderCC[ ==fader_CC]
events <- stria_score[MidiFaderCC ==fader_CC]
events <- stria_score[stria_score$MidiFaderCC ==fader_CC]
events <- stria_score[stria_score$MidiFaderCC==fader_CC]
events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]
events
events <- stria_score[stria_score$MidiFaderCC==fader_CC, stria_score$MidiFaderCC]
events
events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]
events
fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in events){#
  		if (e$isCluster) {#
  			print(events$Event_num)#
  		}#
  	}
fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in events){#
  		if (events$isCluster[e]) {#
  			print(events$Event_num)#
  		}#
  	}
fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in events){#
  		if (events$isCluster[e]) {#
  			print(events$Event_num[e])#
  		}#
  	}
fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in events){#
  		if (events$isCluster[e] == TRUE) {#
  			print(events$Event_num[e])#
  		}#
  	}
events
fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in length(events){#
  		if (events$isCluster[e] == TRUE) {#
  			print(events$Event_num[e])#
  		}#
  	}
fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in length(events)){#
  		if (events$isCluster[e] == TRUE) {#
  			print(events$Event_num[e])#
  		}#
  	}
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events)){#
  		if (events$isCluster[e] == TRUE) {#
  			print(events$Event_num[e])#
  		}#
  	}
events
length(events)
fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == TRUE) {#
  			print(events$Event_num[e])#
  		}#
  	}
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) {#
  			print(events$Event_num[e])#
  		}#
  	}
lines_in_txt <- list()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) {#
  			print(events$Event_num[e])#
  			lines_in_txt.append(events$Event_num[e])#
  		}#
  	}
lines_in_txt <- list()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) {#
  			print(events$Event_num[e])#
  			append(lines_in_txt, events$Event_num[e])#
  		}#
  	}
lines_in_txt
lines_in_txt <- list()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) {#
  			#print(events$Event_num[e])#
  			lines_in_txt <- append(lines_in_txt, events$Event_num[e])#
  		}#
  	}#
 # 	}#
lines_in_txt
lines_in_txt <- list()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		line_list <- c()#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- append(line_list, events$Event_num[e])#
  		}#
  		lines_in_txt <- append(line_list, events$Event_num[e])#
  	}#
 # 	}#
lines_in_txt
lines_in_txt <- list()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		line_list <- c()#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- append(line_list, events$Event_num[e])#
  		}#
  		lines_in_txt <- append(lines_in_txt, line_list)#
  	}#
 # 	}#
lines_in_txt
lines_in_txt <- list()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])  		#
  			line_list <- c()#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- append(line_list, events$Event_num[e])#
  		}#
  		lines_in_txt <- append(lines_in_txt, line_list)#
  	}#
 # 	}#
lines_in_txt
lines_in_txt <- list()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])  		#
  			line_list <- c()#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- append(line_list, events$Event_num[e])#
  	}#
  	lines_in_txt <- append(lines_in_txt, line_list)#
  	}#
 # 	}#
lines_in_txt
lines_in_txt <- list()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])  		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  	}#
  	lines_in_txt <- append(lines_in_txt, line_list)#
  	}#
 # 	}#
lines_in_txt
lines_in_txt <- c()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])  		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  	}#
  	lines_in_txt <- c(lines_in_txt, line_list)#
  	}#
 # 	}#
lines_in_txt
lines_in_txt <- c()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])  		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  	}#
  	lines_in_txt <- append(lines_in_txt, line_list)#
  	}#
 # 	}#
lines_in_txt
lines_in_txt <- list()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])  		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  	}#
  	lines_in_txt <- append(lines_in_txt, line_list)#
  	}#
 # 	}#
lines_in_txt
lines_in_txt <- list()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])  		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  	}#
  	print(line_list)#
  	#lines_in_txt <- append(lines_in_txt, line_list)#
  	}
lines_in_txt <- list()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])  		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  	}#
  }#
    	print(line_list)#
  	#lines_in_txt <- append(lines_in_txt, line_list)#
 # 	}
lines_in_txt <- list()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])#
  			lines_in_txt <- append(lines_in_txt, line_list) # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  		}#
  }#
  	##
 # 	}#
lines_in_txt
lines_in_txt
a = c(1, 2, 3)
b = c(1)
d = list()
d <- append(d, a)
d
d <- append(d, list(a))
d
lines_in_txt <- list()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])#
  			lines_in_txt <- append(lines_in_txt, list(line_list)) # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  		}#
  }#
  	##
 # 	}#
lines_in_txt
lines_in_txt <- list()#
line_list<-c()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])#
  			lines_in_txt <- append(lines_in_txt, list(line_list)) # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  		}#
  }#
  	##
 # 	}#
lines_in_txt
lines_in_txt <- list()#
line_list<-c()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])#
  			lines_in_txt <- append(lines_in_txt, list(line_list)) # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  		}#
  }#
lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list#
  	##
 # 	}#
lines_in_txt
getwd()
setwd(getSrcDirectory(function(){})[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
setwd(getSrcDirectory(function(){})[1])
this.dir <- dirname(parent.frame(2)$ofile)
path <- "../../data/score_as_csv/Stria_score_asNumbers_FaderCC.csv"
stria_score2 <- read.csv(path, sep = ",", dec = ".") # load file
lapply(lines_in_txt, write, "test2.txt", append=TRUE)
lines_in_txt <- list()#
line_list<-c()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])#
  			lines_in_txt <- append(lines_in_txt, c(list(line_list), ";") # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  		}#
  }#
lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list#
  	##
 # 	}#
#
lapply(lines_in_txt, write, "test2.txt", append=TRUE)
lines_in_txt <- list()#
line_list<-c()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])#
  			lines_in_txt <- append(lines_in_txt, c(list(line_list), ";")) # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  		}#
  }#
lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list#
  	##
 # 	}#
#
lapply(lines_in_txt, write, "test2.txt", append=TRUE)
lines_in_txt <- list()#
line_list<-c()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])#
  			line_list <- c(line_list, ";")#
  			lines_in_txt <- append(lines_in_txt, list(line_list)) # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  		}#
  }#
lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list#
  	##
 # 	}#
lapply(lines_in_txt, write, "test2.txt", append=TRUE)
lines_in_txt <- list()#
line_list<-c()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])#
  			line_list <- c(line_list, ";")#
  			lines_in_txt <- append(lines_in_txt, list(line_list)) # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  		}#
  }#
lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list#
  	##
 # 	}#
lapply(lines_in_txt, write, "test2.txt", append=FALSE)
lines_in_txt <- list()#
line_list<-c()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])#
  			line_list <- c(line_list, ";")#
  			lines_in_txt <- append(lines_in_txt, list(line_list)) # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  		}#
  }#
lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list#
  	##
 # 	}#
lapply(lines_in_txt, write, "test2.txt", append=TRUE)
lines_in_txt <- list()#
line_list<-c()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])#
  			#line_list <- c(line_list, ";")#
  			lines_in_txt <- append(lines_in_txt, list(line_list)) # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  		}#
  }#
lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list#
  	##
 # 	}#
lapply(lines_in_txt, write, "test2.txt", append=TRUE)
lines_in_txt <- list()#
line_list<-c()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])#
  			#line_list <- c(line_list, ";")#
  			lines_in_txt <- append(lines_in_txt, list(line_list)) # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  		}#
  }#
lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list#
  	##
 # 	}#
lapply(lines_in_txt, cat, "; \n", "test2.txt", append=TRUE)
lines_in_txt <- list()#
line_list<-c()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])#
  			#line_list <- c(line_list, ";")#
  			lines_in_txt <- append(lines_in_txt, list(line_list)) # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  		}#
  }#
lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list#
  	##
 # 	}#
lapply(lines_in_txt, cat, "; \n", FILE="test2.txt", append=TRUE)
lines_in_txt <- list()
lines_in_txt <- list()#
line_list<-c()#
#for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			#print(events$Event_num[e])#
  			#line_list <- c(line_list, ";")#
  			lines_in_txt <- append(lines_in_txt, list(line_list)) # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  		} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  		}#
  }#
lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list#
  	##
 # 	}
lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list
lapply(lines_in_txt, cat, "; \n", FILE="test2.txt", append=TRUE)
lapply(lines_in_txt, cat, "; \n", file="test2.txt", append=TRUE)
dput(mylist, "mylist.txt")
dput(lines_in_txt, "mylist.txt")
lines_in_txt <- list()#
line_list<-c()#
for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			if(e>1){lines_in_txt <- append(lines_in_txt, list(line_list))} # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  			} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  			}#
  	}#
	lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list#
	lapply(lines_in_txt, cat, "; \n", file=paste("exportPD/fader",fader_CC,".txt", append=TRUE)#
}
lines_in_txt <- list()#
line_list<-c()#
for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			if(e > 1){lines_in_txt <- append(lines_in_txt, list(line_list))} # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  			} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  			}#
  	}#
	lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list#
	#lapply(lines_in_txt, cat, "; \n", file=paste("exportPD/fader",fader_CC,".txt", append=TRUE)#
}
lines_in_txt
lines_in_txt <- list()#
line_list<-c()#
for (fader_CC in 0:7){#
	fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			if(e > 1){lines_in_txt <- append(lines_in_txt, list(line_list))} # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  			} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  			}#
  	}#
	lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list#
	lapply(lines_in_txt, cat, "; \n", file=paste("exportPD/fader",fader_CC,".txt"), append=TRUE)#
}
lines_in_txt <- list()#
line_list<-c()#
for (fader_CC in 0:7){#
	#fader_CC = 0#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			if(e > 1){lines_in_txt <- append(lines_in_txt, list(line_list))} # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  			} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  			}#
  	}#
	lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list#
	lapply(lines_in_txt, cat, "; \n", file=paste("exportPD/fader",fader_CC,".txt", sep=""), append=TRUE)#
}
for (fader_CC in 0:7){#
	lines_in_txt <- list()#
	line_list<-c()#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			if(e > 1){lines_in_txt <- append(lines_in_txt, list(line_list))} # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  			} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  			}#
  	}#
	lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list#
	lapply(lines_in_txt, cat, "; \n", file=paste("exportPD/fader",fader_CC,".txt", sep=""), append=TRUE)#
}
for (fader_CC in 0:7){#
	file.create(paste("exportPD/fader",fader_CC,".txt", sep="")) # empty previous files#
	lines_in_txt <- list()#
	line_list<-c()#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			if(e > 1){lines_in_txt <- append(lines_in_txt, list(line_list))} # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  			} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  			}#
  	}#
	lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list#
	lapply(lines_in_txt, cat, "; \n", file=paste("exportPD/fader",fader_CC,".txt", sep=""), append=TRUE)#
}
for (fader_CC in 0:7){#
	#file.create(paste("exportPD/fader",fader_CC,".txt", sep="")) # empty previous files#
	lines_in_txt <- list()#
	line_list<-c()#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			if(e > 1){lines_in_txt <- append(lines_in_txt, list(line_list))} # append latest line_list, before making a new one		#
  			line_list <- c(events$Event_num[e])#
  			} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  			}#
  	}#
	lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list#
	lapply(lines_in_txt, cat, "; \n", file=paste("exportPD/fader",fader_CC,".txt", sep=""), append=TRUE)#
}
drawfader <- function (y){#
    for (k in stria_score$Event_num) { # k event number, that refers to the line in full sheet#
      if (!is.na(k) && stria_score$MidiFaderCC[k] == y){#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
       if(!stria_score$isCluster[k]) { # event is in cluster, omit event number#
	        text(stria_score$Start[k]-number_distance,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = k, cex = 1.5)#
	             } else { # mark events in cluster#
	             	segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001, col = "red") ##
	             }#
	        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
      }#
    }#
}
drawpage(2, 95, 190)
pdf("~/Desktop/Stria_ahnew_v1.pdf", width = 10.0, height = 7,#
    onefile = TRUE, encoding = "TeXtext.enc")#
drawpage(1, 0, 95)#
drawpage(2, 95, 190)#
drawpage(3, 190, 285)#
#drawpage(4, 285, 380)#
#drawpage(5, 380, 475)#
#drawpage(6, 475, 570)#
#drawpage(7, 570, 665)#
#drawpage(8, 665, 760)#
#drawpage(9, 760, 855)#
#drawpage(10, 855, 950)#
dev.off()
pdf("~/Desktop/Stria_ahnew_v1.pdf", width = 10.0, height = 7,#
    onefile = TRUE, encoding = "TeXtext.enc")#
drawpage(1, 0, 95)#
drawpage(2, 95, 190)#
drawpage(3, 190, 285)#
drawpage(4, 285, 380)#
drawpage(5, 380, 475)#
drawpage(6, 475, 570)#
drawpage(7, 570, 665)#
drawpage(8, 665, 760)#
drawpage(9, 760, 855)#
drawpage(10, 855, 950)#
dev.off()
drawfader <- function (y){ # input is fader number#
    for (k in stria_score$Event_num) { # k event number, that refers to the line in full sheet#
      if (!is.na(k) && stria_score$MidiFaderCC[k] == y){#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+1+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
       if(!stria_score$isCluster[k]) { # event is in cluster, omit event number#
	        text(stria_score$Start[k]-number_distance,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = k, cex = 1.5)#
	             } else { # mark events in cluster#
	             	segments(stria_score$Start[k], y+1+stria_score$Freq[k]*0.0001, stria_score$End[k], y+1+stria_score$Freq[k]*0.0001, col = "red") ##
	             }#
	        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
      }#
    }#
}
pdf("~/Desktop/Stria_ahnew_v1.pdf", width = 10.0, height = 7,#
    onefile = TRUE, encoding = "TeXtext.enc")#
drawpage(1, 0, 95)#
drawpage(2, 95, 190)#
drawpage(3, 190, 285)#
drawpage(4, 285, 380)#
drawpage(5, 380, 475)#
drawpage(6, 475, 570)#
drawpage(7, 570, 665)#
drawpage(8, 665, 760)#
drawpage(9, 760, 855)#
drawpage(10, 855, 950)#
dev.off()
drawfader <- function (y){ # input is fader number#
    for (k in stria_score$Event_num) { # k event number, that refers to the line in full sheet#
      if (!is.na(k) && stria_score$MidiFaderCC[k] == y){#
        #segments(stria_score$Start[k], y+stria_score$Freq[k]*0.0001, stria_score$End[k], y+stria_score$Freq[k]*0.0001) # #
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k] ,stria_score$Start[k], stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact, y+1+(12*log2(stria_score$Freq[k]/440)+69)*0.005, col_r)#
       if(!stria_score$isCluster[k]) { # event is in cluster, omit event number#
	        text(stria_score$Start[k]-number_distance,#
	             y+1+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = k, cex = 1.5)#
	             } else { # mark events in cluster#
	             	segments(stria_score$Start[k], y+1+stria_score$Freq[k]*0.0001, stria_score$End[k], y+1+stria_score$Freq[k]*0.0001, col = "red") ##
	             }#
	        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
	             y+1+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
      }#
    }#
}
pdf("~/Desktop/Stria_ahnew_v1.pdf", width = 10.0, height = 7,#
    onefile = TRUE, encoding = "TeXtext.enc")#
drawpage(1, 0, 95)#
drawpage(2, 95, 190)#
drawpage(3, 190, 285)#
drawpage(4, 285, 380)#
drawpage(5, 380, 475)#
drawpage(6, 475, 570)#
drawpage(7, 570, 665)#
drawpage(8, 665, 760)#
drawpage(9, 760, 855)#
drawpage(10, 855, 950)#
dev.off()
# TODO:#
#Generate Csound MidiTester Score#
# set your working directory to the location of this File#
# this is the most common problem, so check if this scipt does not run properly#
#
# "your_harddrive_location/stria_live_electronics/tools/R-code"#
#
path <- "../../data/score_as_csv/Stria_score_asNumbers_FaderCC.csv"#
stria_score <- read.csv(path, sep = ",", dec = ".") # load file#
#
stria_score$End = stria_score$Start+stria_score$Dur # calc Ends#
col_scale_fact = 1.0/max(stria_score$Freq[1:383]) # scaling factors#
Amp_scale_fact = 0.5/max(stria_score$Amp[1:383])#
number_distance = 1.4#
quartzFonts(avenir = c("Avenir Book", "Avenir Black", "Avenir Book Oblique", "Avenir Black Oblique"))#
par(family = 'avenir')#
#
# identify overlapping clusters#
stria_score$isCluster <- FALSE#
for (k in stria_score$Event_num) { # k event number, that refers to the line in full sheet#
	if (k > 1 && stria_score$MidiFaderCC[k] == stria_score$MidiFaderCC[k-1])#
	{#
		#print(k)#
		#print("same as last")#
		stria_score$isCluster[k] = TRUE#
	}#
}#
#export lists for PD#
for (fader_CC in 0:7){#
	file.create(paste("exportPD/fader",fader_CC,".txt", sep="")) # empty old files#
	lines_in_txt <- list()#
	line_list<-c()#
	events <- stria_score[stria_score$MidiFaderCC==fader_CC, ]#
  	for (e in 1:length(events$isCluster)){#
  		if (events$isCluster[e] == FALSE) { # for each individual event make a new line#
  			if(e > 1){lines_in_txt <- append(lines_in_txt, list(line_list))} # append latest line_list, before making a new one#
  			line_list <- c(events$Event_num[e])#
  			} else { # if its a cluster, add the other events to the same line#
  			line_list <- c(line_list, events$Event_num[e])#
  			}#
  	}#
	lines_in_txt <- append(lines_in_txt, list(line_list)) # append very latest line_list#
	lapply(lines_in_txt, cat, "; \n", file=paste("exportPD/fader",fader_CC,".txt", sep=""), append=TRUE) # write line by line#
}#
# shapes of Buffers # todo check these hardcoded numbers!#
getx <- function (x)#
{#
  switch(x,#
         {},#
         {xx <- c(0, 4096, 8192, 12288, 16384, 0)},#
         {xx <- c(0, 2094, 5246, 12620, 13913, 16384, 0)},#
         {xx <- c(0, 1500, 2500, 3220, 4220, 5464, 16384, 0)},#
         {xx <- c(0, 2525, 5990, 9994, 11345, 16384, 0)},#
         {xx <- c(0, 3276, 6552, 9828, 16384, 0)},#
         {xx <- c(0, 3000, 3010, 3100, 6034, 7415, 8967, 11296, 16384, 0)},#
         {xx <- c(0, 2071, 3279, 3712, 3889, 4580, 5270, 6478, 7253, 8113, 10093, 11557, 16384, 0)}#
  )#
}#
#
gety <- function (y)#
{#
  switch(y,#
         {},#
         {yy <- c(0, 0.33,  1,  0.33, 0, 0)},#
         {yy <- c(1, 0.543, 0.367, 0.2037, 0.0845, 0, 0)},#
         {yy <- c(1, 0.4, 0.2, 0.15, 0.08, 0, 0, 0)},#
         {yy <- c(0.6904, 1, 0.71, 0.255, 0.15, 0, 0)},#
         {yy <- c(-0.5, 0.04, 0.08, 0.01, 0.03, 0)},#
         {yy <- c(0, 0.35, 0.85, 1, 0.857, 0.44, 0.214, 0.107, 0, 0)},#
         {yy <- c(0, 0.135, 0.27, 0.416, 0.827, 0.949, 0.998, 1, 0.916, 0.7, 0.365, 0.234, 0, 0)}#
  )#
}#
#
f <- function (l, r , x, y, a, o, c)# left right start, end, amplitude, offset=freq, c=color#
{#
  polygon((x+getx(l)*(y-x)/16384),(gety(l)*a+o), col = grey(c))#
  polygon((x+getx(r)*(y-x)/16384),(gety(r)*-1*a+o), col = grey(c))#
}#
drawfader <- function(y, beg, end){ # input is fader number#
	  plot(y,#
       xlab = "", # axis label#
       ylab = "",#
       xlim = c(beg, end),#
       ylim = c(y-1,y+1), # axis size#
       xaxs = "i",#
       yaxs = "i",#
       main = "",#
       type = "n",#
       yaxt = "n",#
       xaxt = "n",#
       lty = 2,#
       fg = gray(0.7),#
       axes = FALSE#
       )#
       # Change the plot region color#
       bg_color <- ifelse(y>3, 0, "#f7f7f7")#
rect(par("usr")[1], par("usr")[3],#
     par("usr")[2], par("usr")[4],#
     col = bg_color) # Color#
#
axis(side = 2, las = 2, mgp = c(3, 0.75, 0), at = y, tick = FALSE) ## Rotated labels for MIDICC-Num#
box(lty = 'dashed', col = 'grey')#
    for (k in stria_score$Event_num) { # k event number, that refers to the line in full sheet#
      if (!is.na(k) && stria_score$MidiFaderCC[k] == y){#
        #segments(stria_score$Start[k], y, stria_score$End[k], y) # simple lines, for testing#
        col_r <- col_scale_fact*stria_score$Freq[k]#
        f(stria_score$ampF[k],stria_score$IAF[k], stria_score$Start[k],#
        	stria_score$End[k], stria_score$Amp[k]*Amp_scale_fact,#
        	y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
        	col_r)#
       if(!stria_score$isCluster[k]) { # event is in cluster, omit event number#
	        text(stria_score$Start[k]-number_distance,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = k, cex = 1.5)#
	             } else { # mark events in cluster#
	             	segments(stria_score$Start[k-1], y, stria_score$End[k-1], y, col = "grey") # previous is first element in cluster to mark#
	             	segments(stria_score$Start[k], y, stria_score$End[k], y, col = "grey") # cluster elements (get double drawn)#
	             }#
	        text(stria_score$Start[k] + stria_score$Dur[k]*0.5,#
	             y+(12*log2(stria_score$Freq[k]/440)+69)*0.005,#
	             labels = paste(round(stria_score$Dur[k], 0), "s"), cex = 1.5, col = "white")#
      }#
    }#
}#
drawpage <- function (nr,beg, end)#
{#
  par(mfcol=c(8,1), mai = c(0, 1, 0, 0.4), omi = c(0.2, 0, 0.5, 0), cex = 0.5) # page setup#
  #plot(c(1:100))#
  #plotter(beg, end)#
  for (fader_CC in 7:0){#
  	drawfader(fader_CC, beg, end)#
    }#
   mtext("'Stria' by John Chowning: A Performancescore", side = 3, line = 58, cex = 0.5)  # Add Titel#
   mtext(nr, side = 3, line = 58, cex = 0.5, adj=1)  # Add Pagenumber#
   mtext("        Player 1", line = -15, cex = 0.75, outer = TRUE, adj = 0)#
   mtext("        Player 2", line = -50, cex = 0.75, outer = TRUE, adj = 0)#
#
rect(100, 400, 125, 450, col = "green", border = "blue") # coloured#
#
}#
#
# while debugging Export goes to Desktop#
pdf("~/Desktop/Stria_ahnew_v2.pdf", width = 10.0, height = 7, onefile = TRUE, encoding = "TeXtext.enc")#
drawpage(1, 0, 95)#
drawpage(2, 95, 190)#
drawpage(3, 190, 285)#
drawpage(4, 285, 380)#
drawpage(5, 380, 475)#
drawpage(6, 475, 570)#
drawpage(7, 570, 665)#
drawpage(8, 665, 760)#
drawpage(9, 760, 855)#
drawpage(10, 855, 950)#
#
dev.off()#
########
#Generate Csound MidiTester Score#
#
#stria_tester_score$instrNr <- "i1"#
#stria_tester_score$clustStart#
#stria_tester_score$clustDur#
#stria_tester_score$MidiCh#
#stria_tester_score$MidiCC#
#
stria_tester_score <- data.frame()#
stria_tester_score$clustStart <- stria_score[stria_score$isCluster==FALSE, ]#
#
# calc cluster dur#
#
(#
clustCount = 0#
stria_score$clustNum <- NA#
stria_score$fullClust <- stria_score$isCluster#
# mark complete Cluster (also with first event)#
for (i in stria_score$Event_num) {#
	if (stria_score$isCluster[i] == TRUE) {#
		stria_score$clustNum[i] <- clustCount#
		stria_score$clustNum[i-1] <- clustCount#
		stria_score$fullClust[i-1] <- TRUE#
		}#
	else {#
		clustCount = clustCount + 1#
		stria_score$clustNum[i] <- clustCount#
#
		}#
 }#
)#
# calc maxEnd pro clustNum#
	stria_score$clustNumF <- as.factor(stria_score$clustNum)#
	clustEnds <- by(stria_score$End, stria_score$clustNumF,  FUN=max)#
#
# calc cluster End#
for (i in stria_score$Event_num) {#
	stria_score$clustEnd[i] <- clustEnds[stria_score$clustNum[i]]#
	}#
#
# calc cluster duration, from first event to End of Cluster#
stria_score$clustDur <- NA#
for (i in stria_score$Event_num) {#
	if (stria_score$isCluster[i] == FALSE) {#
			stria_score$clustDur[i] <- stria_score$clustEnd[i] - stria_score$Start[i]#
	}#
}#
stria_score$clustDur#
#stria_tester_score$instrNr <- "i1"#
#stria_tester_score$clustStart#
#stria_tester_score$clustDur#
#stria_tester_score$MidiCh#
#stria_tester_score$MidiCC#
stria_score$MidiCh <- 1#
stria_score$instrNr <- "i1"#
#
str(stria_score)#
#
stria_tester_score<- stria_score[!is.na(stria_score$clustDur), c("instrNr", "Start", "clustDur", "MidiCh", "MidiFaderCC")]#
#
stria_tester_score
